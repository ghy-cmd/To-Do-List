# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'panel.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


import sys

from PyQt5.QtGui import QIcon
from PyQt5.QtWidgets import *
from PyQt5.QtCore import QTimer, QDateTime, Qt
from PyQt5 import QtGui

# from qdarkstyle import LightPalette

from view.calendar import Ui_Form
# from view.logInFrame import LogInFrame
from view.panel import Ui_panel
import sqlite3
from view.personalInfo import PersonalInfoFrame
from view.person_nn import Ui_info
from view.frame import Frame
# from qt_material import apply_stylesheet
# import qdarkstyle

db_file = "identifier.sqlite"


class Panel(QMainWindow):
    def __init__(self):
        super(Panel, self).__init__()
        self.move_flag = False  # 设置一个标记，确保只有在执行mousePressEvent之后才会执行mouseMoveEvent

    def mousePressEvent(self, evt):
        # print("鼠标按下")
        if evt.button() == Qt.LeftButton:  # 仅在鼠标左键按下时可以拖动
            self.move_flag = True  # 设置一个标记，确保只有在执行mousePressEvent之后才会执行mouseMoveEvent
            # 确定两个点（鼠标第一次按下的点，窗口当前所在的原始点）
            self.mouse_x = evt.globalX()
            self.mouse_y = evt.globalY()
            # print(self.mouse_x, self.mouse_y)
            self.origen_x = self.x()
            self.origen_y = self.y()

    def mouseMoveEvent(self, evt) -> None:
        # print("鼠标移动")
        if self.move_flag:
            # print(evt.globalX(), evt.globalY())
            # 计算的是移动向量
            move_x = evt.globalX() - self.mouse_x
            move_y = evt.globalY() - self.mouse_y
            dest_x = self.origen_x + move_x
            dest_y = self.origen_y + move_y
            self.move(dest_x, dest_y)

    def mouseReleaseEvent(self, a0: QtGui.QMouseEvent) -> None:
        self.move_flag = False  # 鼠标释放后重置标记，避免无法释放拖动
        # print("鼠标释放")


class Global(object):
    def __init__(self):
        self.app = QApplication(sys.argv)
        with open("style/style.qss", "r", encoding='utf-8') as file:
            qss = file.read()
        print(qss)
        # apply_stylesheet(self.app, theme='dark_blue.xml')
        # self.app.setStyleSheet(qdarkstyle.load_stylesheet_pyqt5())
        # self.app.setStyleSheet(qdarkstyle.load_stylesheet(qt_api='pyqt5', palette=LightPalette()))
        # self.mainWindow = LogInFrame().frame
        # self.mainWindowDecorate = LogInFrame()
        # self.b = PersonalInfoFrame()
        # self.a = LogInFrame()

        # self.PanelPage = QMainWindow()
        self.PanelPage = Panel()
        self.PanelDecorate = Ui_panel()
        self.PanelPage.setStyleSheet(qss)
        self.PanelPage.setWindowIcon(QIcon("./images/to_do.png"))
        # self.PanelPage.setStyleSheet("background-color:rgb(240,247,254)")
        # self.PanelDecorate.page_ca.setStyleSheet(qss)
        # self.PanelDecorate.page_all.setStyleSheet(qss)
        # self.PanelDecorate.page_plan.setStyleSheet(qss)
        # self.PanelDecorate.page_today.setStyleSheet(qss)
        self.PanelPage.setContentsMargins(0, 0, 0, 0)
        self.PanelPage.setWindowFlags(Qt.FramelessWindowHint)
        screen = QDesktopWidget().screenGeometry()
        size = self.PanelPage.geometry()
        newLeft = (screen.width() - size.width()) // 6
        newTop = (screen.height() - size.height()) // 8
        self.PanelPage.move(newLeft, newTop)
        # self.PanelPage.setStyleSheet("background-color:rgb(255, 255, 255)")

        self.info_page = Frame()
        self.infoDecorate = Ui_info()
        # self.info_page.setWindowTitle("user_info")
        # self.info_page.setWindowIcon(QIcon(u"./images/to_do_37.png"))

        self.conn = sqlite3.connect(db_file)


g = Global()
